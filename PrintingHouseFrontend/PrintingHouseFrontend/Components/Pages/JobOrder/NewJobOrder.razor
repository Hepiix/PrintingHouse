@page "/newjoborder"

@inject NavigationManager NavigationManager
@inject JobOrderClient JobOrderClient
@inject CustomersClient CustomersClient
@inject JobDetailsClient JobDetailsClient

@rendermode InteractiveServer

<h3>New Job Order</h3>
<EditForm Model="@jobOrderEntity"
    FormName="newJobOrder"
    OnValidSubmit="HandleSubmitAsync"
    Enhance>
    <DataAnnotationsValidator />
    <ValidationSummary />
    <label for="customerId">Customer Name</label>
    <InputSelect class="form-control" id="customerId" @bind-Value="jobOrderEntity.CustomerId">
        <option value="">--- Select ---</option>
        @foreach(var customer in customers)
        {
            <option value="@customer.Id">@customer.Name @customer.Surname</option>
        }
    </InputSelect>
    <label for="jobDetailsId">Job Name</label>
    <InputSelect class="form-control" id="jobDetailsId" @bind-Value="jobOrderEntity.JobDetailsId">
        <option value="">--- Select ---</option>
        @foreach(var jobDetail in jobDetails)
        {
            <option value="@jobDetail.Id">@jobDetail.Name</option>
        }
    </InputSelect>
    <label for="orderDate">Order Date</label>
    <InputDate class="form-control" id="orderDate" @bind-Value="jobOrderEntity.OrderDate" />
    <label for="status">Status</label>
    <InputCheckbox class="form-check-input mb-3" id="status" @bind-Value="jobOrderEntity.Status" />
    <br />
    <button class="btn btn-success" type="submit">Save Changes</button>
    <a role="button" class="btn btn-danger" href="/joborders">Cancel</a>
</EditForm>


@code {
    private JobOrderEntity jobOrderEntity = new JobOrderEntity
    {
        OrderDate = DateOnly.FromDateTime(DateTime.Today)
    };

    JobDetails[] jobDetails = [];
    Customer[] customers = [];

    protected override async Task OnInitializedAsync()
    {
        jobDetails = await JobDetailsClient.GetJobsDetailsAsync();
        customers = await CustomersClient.GetCustomersAsync();
    }

    private async Task HandleSubmitAsync()
    {
        await JobOrderClient.AddJobOrderAsync(jobOrderEntity);
        NavigationManager.NavigateTo("/joborders");
    }
}
