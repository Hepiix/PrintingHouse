@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager

@inherits LayoutComponentBase
@if(username is null)
{
    <nav class="navbar navbar-expand-lg fixed-top bg-dark border-bottom" data-bs-theme="dark">
        <div class="container-fluid">
            <a class="navbar-brand" href="#">Printing House</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarText" aria-controls="navbarText" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarText">
                <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                    <li class="nav-item">
                        <a class="@GetNavLinkClass("/")" href="/">Home</a>
                    </li>
                    <li class="nav-item">
                        <a class="@GetNavLinkClass("customers")" href="/customers">Customers</a>
                    </li>
                    <li class="nav-item">
                        <a class="@GetNavLinkClass("jobsdetails")" href="/jobsdetails">Jobs Details</a>
                    </li>
                    <li class="nav-item">
                        <a class="@GetNavLinkClass("joborders")" href="/joborders">Job Orders</a>
                    </li>
                    <li class="nav-item">
                        <a class="@GetNavLinkClass("login")" href="/login">Login</a>
                    </li>
                    <li class="nav-item">
                        <a class="@GetNavLinkClass("register")" href="/register">Register</a>
                    </li>
                </ul>
                <span class="navbar-text">
                    Not logged in.
                </span>
            </div>
        </div>
    </nav>
}
else
{
    <nav class="navbar navbar-expand-lg fixed-top bg-dark border-bottom" data-bs-theme="dark">
        <div class="container-fluid">
            <a class="navbar-brand" href="#">Printing House</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarText" aria-controls="navbarText" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarText">
                <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                    <li class="nav-item">
                        <a class="@GetNavLinkClass("/")" aria-current="page" href="/">Home</a>
                    </li>
                    <li class="nav-item">
                        <a class="@GetNavLinkClass("customers")" href="/customers">Customers</a>
                    </li>
                    <li class="nav-item">
                        <a class="@GetNavLinkClass("jobsdetails")" href="/jobsdetails">Jobs Details</a>
                    </li>
                    <li class="nav-item">
                        <a class="@GetNavLinkClass("joborders")" href="/joborders">Job Orders</a>
                    </li>
                </ul>
                <span class="navbar-text me-3">
                    Welcome, @username!
                </span>
                <span class="nav-link">
                    <button class="btn btn-secondary" @onclick="Logout">Logout</button>
                </span>
                
                
            </div>
        </div>
    </nav>
}

<div style="margin-top: 70px;">
    @Body
</div>

@code {
    string username;
    Uri uri;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                username = await LocalStorage.GetItemAsStringAsync("username");
                StateHasChanged();
            }
            catch
            {
                Console.WriteLine("xd");
            }
        }
    }

    private async Task Logout()
    {
        await LocalStorage.RemoveItemAsync("username");
        await LocalStorage.RemoveItemAsync("token");
        NavigationManager.Refresh();
    }

    private string GetNavLinkClass(string link)
    {
        uri = new Uri(NavigationManager.Uri);
        var segments = uri.Segments;
        if (segments.Length > 1)
        {
            if (link == segments[1].TrimEnd('/'))
            {
                return "nav-link active";
            }
            else
            {
                return "nav-link";
            }
        }
        else
        {
            if (link != segments[0])
                return "nav-link";
            else
                return "nav-link active";
        }
    }
}