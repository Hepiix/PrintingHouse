@page "/login"
@inject UserLoginClient client
@inject NavigationManager NavigationManager
@inject ILocalStorageService localStorage

<h3>Login</h3>
@if (!isSuccessful)
{
    <h5 class="text-danger">Login failed!</h5>
}

    <h6 class="text-primary">Login: jankowal@mail.com<br />Password: 123123</h6>
<EditForm Model="@user"
    FormName="login"
    OnValidSubmit="@HandleSubmitAsync"
    Enhance>
    <DataAnnotationsValidator />
    <ValidationSummary />
    <label for="email">Email</label>
    <InputText class="form-control" id="email" @bind-Value="user.Email" />

    <label for="password">Password</label>
    <InputText type="password" class="form-control" id="password" @bind-Value="user.Password" />

    <button class="btn btn-success" type="submit">Login</button>
</EditForm>


@code {
    [SupplyParameterFromForm]
    private UserData? user { get; set; }
    bool isSuccessful = true;

    protected override async Task OnParametersSetAsync()
    {
        user = new()
            {
                Email = string.Empty,
                Password = string.Empty
            };
    }

    private async Task HandleSubmitAsync()
    {
        try
        {
            var response = await client.LoginUserAsync(user!);
            AuthToken? token = await response.Content.ReadFromJsonAsync<AuthToken>();
            await localStorage.SetItemAsStringAsync("token", token.Token);
            await localStorage.SetItemAsStringAsync("username", token.UserName);
            NavigationManager.NavigateTo("/");
            NavigationManager.Refresh();
        }
        catch
        {
            isSuccessful = false;
        }

    }
}
