@page "/customers"
@inject CustomersClient CustomersClient
@inject NavigationManager NavigationManager

@if (!isAuthorized)
{
    <h1>Unauthorized, please <a href="/login">login</a>.</h1>
}
else
{
    @if (customers is null)
    {
        <h1>Loading...</h1>
    }
    else
    {
        <div>
            <table class="table table-dark table-hover table-bordered caption-top table-align-middle">
                <caption>List of all customers
                    <div class="row row-cols-auto">
                        <div class="col">
                    <InputSelect @bind-Value="currentSortColumn" class="form-select">
                            <option value="">Select Sort Option</option>
                            <option value="Id">Id</option>
                            <option value="Name">Name</option>
                            <option value="Surname">Surname</option>
                            </InputSelect>
                        </div>
                        <div class="col">
                            @if (isAscending)
                            {
                                <i class="bi bi-caret-down-fill h4" @onclick="() => isAscending = false"></i>
                            }
                            else
                            {
                                <i class="bi bi-caret-up-fill h4" @onclick="() => isAscending = true"></i>
                            }
                        </div>
                        <div class="col">
                            <button class="btn btn-primary" @onclick="() => SortTable(currentSortColumn)">Apply</button>
                        </div>
                    </div>
                </caption>
                <thead class="table-light align-middle">
                <th class="text-center" scope="col" style="width: 5%;">Id</th>
                <th scope="col">Customer Name</th>
                <th scope="col" style="width: 20%;">Company</th>
                <th class="text-center" scope="col" style="width: 12%;">Phone Number</th>
                <th>Email</th>
                <th>Address</th>
                <th class="text-center" scope="col" style="width: 12%;"><a href="editcustomers/" class="btn btn-success"><i class="bi bi-person-plus"></i> Add new</a></th>
                </thead>
                <tbody class="table-group-divider">
                    @foreach (var customer in customers)
                    {
                        <tr class="align-middle">
                            <td class="text-center">@customer.Id</td>
                            <td>@customer.Name @customer.Surname</td>
                            <td>@customer.Company</td>
                            <td class="text-center">@customer.PhoneNumber</td>
                            <td>@customer.Email</td>
                            <td>@customer.StreetAddress @customer.City @customer.State @customer.PostalCode @customer.Country</td>
                            <td class="text-center">
                                <a href="editcustomers/@customer.Id" class="btn btn-primary">
                                    <i class="bi bi-pencil"></i>
                                </a> <button class="btn btn-danger"
                                             data-bs-toggle="modal"
                                             data-bs-target="@GetDeleteModalId(customer)">
                                    <i class="bi bi-trash3"></i>
                                </button>
                                <DeleteCustomer customer="@customer" />
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
}

@code {
    List<Customer> customers = new List<Customer>();
    bool isAuthorized = false;
    private bool isAscending = false;
    private string currentSortColumn;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                isAuthorized = true;
                var customersArray = await CustomersClient.GetCustomersAsync();
                customers = customersArray.ToList();
                StateHasChanged();
            }
            catch
            {
                isAuthorized = false;
            }
        }
    }

    private void SortTable(string columnName)
    {
        if (currentSortColumn != columnName)
            currentSortColumn = columnName;

        switch (columnName)
        {
            case nameof(Customer.Id):
                customers = isAscending
                    ? customers.OrderBy(j => j.Id).ToList()
                : customers.OrderByDescending(j => j.Id).ToList();
                break;

            case nameof(Customer.Name):
                customers = isAscending
                    ? customers.OrderBy(j => j.Name).ToList()
                : customers.OrderByDescending(j => j.Name).ToList();
                break;

            case nameof(Customer.Surname):
                customers = isAscending
                    ? customers.OrderBy(j => j.Surname).ToList()
                : customers.OrderByDescending(j => j.Surname).ToList();
                break;
        }
    }

    private string GetDeleteModalId(Customer customer) => $"#{DeleteCustomer.GetModalId(customer)}";
}
