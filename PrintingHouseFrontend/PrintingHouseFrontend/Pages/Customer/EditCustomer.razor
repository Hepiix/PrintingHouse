@page "/editcustomers"
@page "/editcustomers/{id:int}"

@inject NavigationManager NavigationManager
@inject CustomersClient CustomersClient
@inject Blazored.LocalStorage.ILocalStorageService localStorage


<h3>@title</h3>

@if(customer is null)
{
    <p>Loading...</p>
}
else
{
    <div>
    <EditForm Model="@customer"
        FormName="editCustomer"
        OnValidSubmit="HandleSubmitAsync"
        Enhance>
        <DataAnnotationsValidator />
        <ValidationSummary />
        <label for="name">Name</label>
        <InputText class="form-control" id="name" @bind-Value="customer.Name" />
        
        <label for="surname">Surname</label>
        <InputText class="form-control" id="surname" @bind-Value="customer.Surname" />

        <label for="company">Company</label>
        <InputText class="form-control" id="company" @bind-Value="customer.Company" />

        <label for="phoneNumber">Phone Number</label>
        <InputText class="form-control" id="phoneNumber" @bind-Value="customer.PhoneNumber" />

        <label for="email">Email</label>
        <InputText class="form-control" id="email" @bind-Value="customer.Email" />

        <label for="streetAddress">Street Address</label>
        <InputText class="form-control" id="streetAddress" @bind-Value="customer.StreetAddress" />

        <label for="city">City</label>
        <InputText class="form-control" id="city" @bind-Value="customer.City" />

        <label for="state">State</label>
        <InputText class="form-control" id="state" @bind-Value="customer.State" />

        <label for="postalCode">Postal Code</label>
        <InputText class="form-control" id="postalCode" @bind-Value="customer.PostalCode" />

        <label for="country">Country</label>
        <InputText class="form-control" id="country" @bind-Value="customer.Country" />
        <br />
        <button class="btn btn-success" type="submit">@submitButton</button>

        <a role="button" class="btn btn-danger" href="/customers">Cancel</a>

    </EditForm>
    </div>
}

@code {
    [Parameter]
    public int? Id { get; set; }

    [SupplyParameterFromForm]
    private Customer? customer { get; set; }

    private string title = string.Empty;
    private string submitButton = string.Empty;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            if (customer is not null)
                return;

            if (Id is not null)
            {
                title = "Edit Customer";
                submitButton = "Save changes";
                customer = await CustomersClient.GetCustomerAsync(Id.Value);
            }
            else
            {
                customer = new()
                    {
                        Name = string.Empty,
                        Surname = string.Empty,
                        Company = string.Empty,
                        PhoneNumber = string.Empty,
                        Email = string.Empty,
                        StreetAddress = string.Empty,
                        City = string.Empty,
                        State = string.Empty,
                        PostalCode = string.Empty,
                        Country = string.Empty
                    };

                title = "New Customer";
                submitButton = "Submit";
            }
        }
        StateHasChanged();
    }

    private async Task HandleSubmitAsync()
    {
        if (Id is null)
            await CustomersClient.AddCustomerAsync(customer);
        else
        {
            customer.Id = Id.Value;
            await CustomersClient.UpdateCustomerAsync(customer);
        }

        NavigationManager.NavigateTo("/customers");
    }
}