@page "/editjoborder/{id:int}"

@inject NavigationManager NavigationManager
@inject JobOrderClient JobOrderClient
@inject CustomersClient CustomersClient
@inject JobDetailsClient JobDetailsClient

<h3>Edit Job Order</h3>
@if(oldJobDetails is null || oldCustomer is null)
{
    <p>Loading...</p>
}
else
{
    <EditForm Model="@jobOrderEntity"
        FormName="editJobOrder"
        OnValidSubmit="HandleSubmitAsync"
        Enhance>
        <DataAnnotationsValidator />
        <ValidationSummary />

        <label for="customerId">Customer Name</label>
        <InputSelect class="form-control" id="customerId" @bind-Value="jobOrderEntity.CustomerId">
            <option value="@oldCustomer.Id">@oldCustomer.Name @oldCustomer.Surname</option>
            @foreach (var customer in customers)
            {
                if(customer == oldCustomer)
                    continue;
                else
                {
                    <option value="@customer.Id">@customer.Name @customer.Surname</option>
                }
            }
        </InputSelect>

        <label for="jobDetailsId">Job Name</label>
        <InputSelect class="form-control" id="jobDetailsId" @bind-Value="jobOrderEntity.JobDetailsId">
            <option value="@oldJobDetails.Id">@oldJobDetails.Name</option>
            @foreach (var jobDetail in jobDetails)
            {
                if (jobDetail == oldJobDetails)
                    continue;
                else
                {
                    <option value="@jobDetail.Id">@jobDetail.Name</option>
                }
                
            }
        </InputSelect>

        <label for="orderDate">Order Date</label>
        <InputDate class="form-control" id="orderDate" @bind-Value="jobOrderEntity.OrderDate" />
        <label for="status">Status</label>
        <InputCheckbox class="form-check-input mb-3" id="status" @bind-Value="jobOrderEntity.Status" />
        <br />
        <button class="btn btn-success" type="submit">Save Changes</button>
        <a role="button" class="btn btn-danger" href="/joborders">Cancel</a>
    </EditForm>

}

@code {
    [Parameter]
    public int id { get; set; }
    [SupplyParameterFromForm]
    private JobOrderEntity? jobOrderEntity { get; set; }

    private JobOrderViewModel? jobOrderViewModel;
    private JobDetails[] jobDetails = [];
    private Customer[] customers = [];
    private Customer? oldCustomer;
    private JobDetails? oldJobDetails;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            jobOrderViewModel = await JobOrderClient.GetJobOrderAsync(id);
            jobDetails = await JobDetailsClient.GetJobsDetailsAsync();
            customers = await CustomersClient.GetCustomersAsync();

            oldJobDetails = jobDetails.FirstOrDefault(j => j.Name == jobOrderViewModel.JobName);
            oldCustomer = customers.FirstOrDefault(c => c.Name ==
                (jobOrderViewModel.CustomerName.IndexOf(' ') > 0 ?
                 jobOrderViewModel.CustomerName.Substring(0, jobOrderViewModel.CustomerName.IndexOf(' '))
                 : jobOrderViewModel.CustomerName));
            if (jobOrderEntity is not null)
                return;

            jobOrderEntity = new()
                {
                    CustomerId = oldCustomer.Id,
                    JobDetailsId = oldJobDetails.Id,
                    OrderDate = jobOrderViewModel.OrderDate,
                    Status = jobOrderViewModel.Status
                };

        }
        StateHasChanged();
    }

    private async Task HandleSubmitAsync()
    {
        jobOrderEntity.Id = jobOrderViewModel.Id;
        await JobOrderClient.UpdateJobOrderAsync(jobOrderEntity);
        NavigationManager.NavigateTo("/joborders");
    }
}
