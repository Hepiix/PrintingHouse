@page "/joborders"
@inject JobOrderClient JobOrderClient
@inject NavigationManager NavigationManager


@if (!isAuthorized)
{
    <h1>Unauthorized, please <a href="/login">login</a>.</h1>
}
else
{
    @if (jobOrders is null)
    {
        <h1>Loading...</h1>
    }
    else
    {
        <table class="table table-dark table-hover table-bordered caption-top table-align-middle table-responsive">
            <caption>
                List of all job orders
                <div class="row row-cols-auto">
                    <div class="col">
                <InputSelect @bind-Value="currentSortColumn" class="form-select">
                    <option value="">Select Sort Option</option>
                    <option value="CustomerName">Customer Name</option>
                    <option value="Id">Id</option>
                    <option value="JobName">Job Name</option>
                    <option value="OrderDate">Order Date</option>
                    <option value="Status">Status</option>
                </InputSelect>
                    </div>
                        <div class="col">
                            @if (isAscending)
                            {
                                <i class="bi bi-caret-down-fill h4" @onclick="() => isAscending = false"></i>
                            }
                            else
                            {
                                <i class="bi bi-caret-up-fill h4" @onclick="() => isAscending = true"></i>
                            }
                        </div>
                        <div class="col">
                            <button class="btn btn-primary" @onclick="() => SortTable(currentSortColumn)">Apply</button>
                        </div>
                    
                </div>
            </caption>
            <thead class="table-light align-middle">
                <th class="text-center" style="width: 5%;">Id</th>
                <th>Customer Name</th>
                <th>Job Name</th>
                <th class="text-center">Order Date</th>
                <th>Quantity</th>
                <th>Total Price</th>
                <th>Delivery Method</th>
                <th class="text-center">Status</th>
                <th>Customer Note</th>
                <th class="text-center" style="width: 12%;"><a href="newjoborder/" class="btn btn-success"><i class="bi bi-person-plus"></i> Add new</a></th>
            </thead>
            <tbody>
                @foreach (JobOrderViewModel jobOrder in jobOrders)
                {
                    <tr class="align-middle">
                        <td class="text-center">@jobOrder.Id</td>
                        <td>@jobOrder.CustomerName</td>
                        <td>@jobOrder.JobName</td>
                        <td class="text-center">@jobOrder.OrderDate</td>
                        <td>@jobOrder.Quantity</td>
                        <td>@jobOrder.TotalPrice</td>
                        <td>@jobOrder.DeliveryMethod</td>
                        @if (jobOrder.Status == "Pending")
                        {
                            <td class="text-warning">@jobOrder.Status</td>
                        }
                        else if (jobOrder.Status == "In Progress")
                        {
                            <td class="text-primary">@jobOrder.Status</td>
                        }
                        else if (jobOrder.Status == "Completed")
                        {
                            <td class="text-success">@jobOrder.Status</td>
                        }
                        else
                        {
                            <td class="text-danger">Error</td>
                        }
                        <td title="@jobOrder.CustomerNote">
                            @((jobOrder.CustomerNote?.Length > 20)
                                ? jobOrder.CustomerNote.Substring(0, 20) + "..."
                                : jobOrder.CustomerNote)
                        </td>
                        <td class="text-center">
                            <a href="editjoborder/@jobOrder.Id" class="btn btn-primary"><i class="bi bi-pencil"></i></a>
                            <button class="btn btn-danger"
                                    data-bs-toggle="modal"
                                    data-bs-target="@GetDeleteModalId(jobOrder)">
                                <i class="bi bi-trash3"></i>
                            </button>
                            <DeleteJobOrder jobOrder="jobOrder" />
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code {
    List<JobOrderViewModel> jobOrders = new List<JobOrderViewModel>();
    bool isAuthorized = false;
    private bool isAscending = false;
    private string currentSortColumn;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                isAuthorized = true;
                var jobOrdersArray = await JobOrderClient.GetJobOrdersAsync();
                jobOrders = jobOrdersArray.ToList();
                StateHasChanged();
            }
            catch
            {
                isAuthorized = false;
            }
        }
    }

    private void SortTable(string columnName)
    {
        if (currentSortColumn != columnName)
            currentSortColumn = columnName;

        switch (columnName)
        {
            case nameof(JobOrderViewModel.CustomerName):
                jobOrders = isAscending
                    ? jobOrders.OrderBy(j => j.CustomerName).ToList()
                : jobOrders.OrderByDescending(j => j.CustomerName).ToList();
                    break;

            case nameof(JobOrderViewModel.JobName):
                jobOrders = isAscending
                    ? jobOrders.OrderBy(j => j.JobName).ToList()
                : jobOrders.OrderByDescending(j => j.JobName).ToList();
                break;

            case nameof(JobOrderViewModel.Id):
                jobOrders = isAscending
                    ? jobOrders.OrderBy(j => j.Id).ToList()
                : jobOrders.OrderByDescending(j => j.Id).ToList();
                break;

            case nameof(JobOrderViewModel.OrderDate):
                jobOrders = isAscending
                    ? jobOrders.OrderBy(j => j.OrderDate).ToList()
                : jobOrders.OrderByDescending(j => j.OrderDate).ToList();
                break;

            case nameof(JobOrderViewModel.Status):
                jobOrders = isAscending
                    ? jobOrders.OrderBy(j => j.Status).ToList()
                : jobOrders.OrderByDescending(j => j.Status).ToList();
                break;
        }
    }

    private string GetDeleteModalId(JobOrderViewModel jobOrder) => $"#{DeleteJobOrder.GetModalId(jobOrder)}";}