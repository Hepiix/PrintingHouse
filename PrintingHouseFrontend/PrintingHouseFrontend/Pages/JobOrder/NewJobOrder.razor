@page "/joborders/newjoborder"

@inject NavigationManager NavigationManager
@inject JobOrderClient JobOrderClient
@inject CustomersClient CustomersClient
@inject JobDetailsClient JobDetailsClient


<h3>New Job Order</h3>

@if (!isAuthorized)
{
    <h1>Unauthorized, please <a href="/login">login</a>.</h1>
}
else
{
    <EditForm Model="@jobOrderEntity"
              FormName="newJobOrder"
              OnValidSubmit="HandleSubmitAsync"
              Enhance>
        <DataAnnotationsValidator />
        <ValidationSummary />
        <label for="customerId">Customer Name</label>
        <InputSelect class="form-control" id="customerId" @bind-Value="@jobOrderEntity.CustomerId">
            <option value="">--- Select ---</option>
            @foreach (var customer in customers)
            {
                <option value="@customer.Id">@customer.Name @customer.Surname</option>
            }
        </InputSelect>
        <label for="jobDetailsId">Job Name</label>
        <InputSelect class="form-control" id="jobDetailsId" @bind-Value="@jobOrderEntity.JobDetailsId">
            <option value="">--- Select ---</option>
            @foreach (var jobDetail in jobDetails)
            {
                <option value="@jobDetail.Id">@jobDetail.Name</option>
            }
        </InputSelect>
        <label for="orderDate">Order Date</label>
        <InputDate class="form-control" id="orderDate" @bind-Value="@jobOrderEntity.OrderDate" />

        <label for="unitPrice">Quantity</label>
        <InputNumber class="form-control" id="quantity" @bind-Value="@jobOrderEntity.Quantity" @onfocusout="CalculateTotal" />

        <label for="unitPrice">Total Price</label>
        <InputNumber class="form-control" id="totalPrice" @bind-Value="@jobOrderEntity.TotalPrice" />

        <label for="deliveryMethod">Delivery Method</label>
        <InputSelect class="form-control" id="status" @bind-Value="@jobOrderEntity.DeliveryMethod">
            <option value="">--- Select ---</option>
            <option value="Courier">Courier</option>
            <option value="Self Pickup">Self Pickup</option>
        </InputSelect>
        <label for="customerNote">Customer Note</label>
        <InputTextArea class="form-control comment-box" id="name" @bind-Value="jobOrderEntity.CustomerNote" />
        <br />
        <button class="btn btn-success" type="submit">Save Changes</button>
        <a role="button" class="btn btn-danger" href="/joborders">Cancel</a>
    </EditForm>
}


@code {
    private JobOrderEntity jobOrderEntity = new JobOrderEntity
    {
        OrderDate = DateOnly.FromDateTime(DateTime.Today),
        Quantity = 0,
        TotalPrice = 0,
        Status = "Pending",
        DeliveryMethod = string.Empty,
        CustomerNote = string.Empty
    };
    JobDetails[] jobDetails = [];
    Customer[] customers = [];
    bool isAuthorized = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            try
            {
                isAuthorized = true;
                if (jobDetails.Length <= 0 || customers.Length <= 0)
                {
                    jobDetails = await JobDetailsClient.GetJobsDetailsAsync();
                    customers = await CustomersClient.GetCustomersAsync();
                }
                else
                {
                    return;
                }
            }
            catch
            {
                isAuthorized = false;
            }
        }
        StateHasChanged();
    }

    private void CalculateTotal()
    {
        if (jobOrderEntity.JobDetailsId == 0)
            return;
        else
            jobOrderEntity.TotalPrice = jobOrderEntity.Quantity * jobDetails[jobOrderEntity.JobDetailsId - 1].UnitPrice;
    }

    private async Task HandleSubmitAsync()
    {
        await JobOrderClient.AddJobOrderAsync(jobOrderEntity);
        NavigationManager.NavigateTo("/joborders");
    }
}
